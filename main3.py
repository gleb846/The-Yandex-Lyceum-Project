import telebot
from telebot import types
from database import Session
from models import User, Suggestion
from datetime import datetime
from database import Base, engine
from models import User, Suggestion
import random
from models import ButtonText  # –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from models import PracticeQuestion
import io
from models import File
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
engine = create_engine('sqlite:///mydatabase.db')
Session = sessionmaker(bind=engine)

Base.metadata.create_all(engine)

bot = telebot.TeleBot('7332111753:AAG05D9vjSpn_ca2xrwxzTDFFNrRKOWKD1A')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    session = Session()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = session.query(User).filter_by(telegram_id=message.chat.id).first()
    if not user:
        user = User(
            telegram_id=message.chat.id,
            username=message.from_user.username or message.from_user.first_name
        )
        session.add(user)
        session.commit()
    session.close()
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('–ü—Ä–æ—Ñ–∏–ª—å', callback_data='profile')
    btn2 = types.InlineKeyboardButton('–¢–µ–æ—Ä–∏—è', callback_data='theory')
    btn3 = types.InlineKeyboardButton('–ü—Ä–∞–∫—Ç–∏–∫–∞', callback_data='practice')
    btn4 = types.InlineKeyboardButton('–ü–æ–ª–µ–∑–Ω—ã–µ —Ñ–∞–π–ª—ã', callback_data='files')
    btn5 = types.InlineKeyboardButton('–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è', callback_data='offers')
    btn6 = types.InlineKeyboardButton('üèÜ –¢–æ–ø-10', callback_data='leaderboard')
    btn7 = types.InlineKeyboardButton('–ü–æ–ª–µ–∑–Ω—ã–µ –∫–∞–Ω–∞–ª—ã', callback_data='channels')
    btn8 = types.InlineKeyboardButton('–ü–æ–≥–æ–¥–∞', callback_data='weather')
    markup.add(btn1, btn6)
    markup.add(btn2, btn3)
    markup.add(btn4)
    markup.add(btn7)
    markup.add(btn5)
    markup.add(btn8)
    bot.send_message(message.chat.id,
                     "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ï–ì–≠ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ!\nüìå –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ:\n- üìñ –ü—Ä–æ–∫–∞—á–∞—Ç—å –∑–Ω–∞–Ω–∏—è –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ\n- ‚ùì –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Å –≤—ã–±–æ—Ä–æ–º –æ—Ç–≤–µ—Ç–∞\n- üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n- ‚úçÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –∏–¥–µ–∏",
                     reply_markup=markup)


@bot.message_handler(func=lambda message: True)
def handle_text(message):
    chat_id = message.chat.id
    text = message.text.strip()

    # 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    if user_suggestions.get(chat_id) == "waiting_for_suggestion":
        session = Session()
        suggestion = Suggestion(
            telegram_id=chat_id,
            username=message.from_user.username or message.from_user.first_name,
            text=text
        )
        session.add(suggestion)
        session.commit()
        session.close()

        user_suggestions.pop(chat_id)
        bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ! üòä")
        return start(message)

    # 2. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏
    if text.lower() == "–∑–∞–≤–µ—Ä—à–∏—Ç—å":
        user_practice_data.pop(chat_id, None)
        return start(message)

    if user_suggestions.get(chat_id) == "waiting_for_weather":
        weather_info = get_weather(text)
        bot.send_message(chat_id, weather_info)
        user_suggestions.pop(chat_id)
        return start(message)

    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ
    if chat_id in user_practice_data:
        data = user_practice_data[chat_id]
        question_text = data.get("current_question")

        if not question_text:
            return bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

        session = Session()
        question_obj = session.query(PracticeQuestion).filter_by(question=question_text).first()
        user = session.query(User).filter_by(telegram_id=chat_id).first()

        if not question_obj or not user:
            session.close()
            return bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å –≤–æ–ø—Ä–æ—Å–æ–º –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")

        if text.strip() == question_obj.correct_answer:
            user.correct_answers += 1
            bot.send_message(chat_id, "‚úÖ –í–µ—Ä–Ω–æ! –ú–æ–ª–æ–¥–µ—Ü.")
        else:
            user.incorrect_answers += 1
            bot.send_message(chat_id, f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n‚ÑπÔ∏è –ü–æ—è—Å–Ω–µ–Ω–∏–µ: {question_obj.explanation}")

        session.commit()
        session.close()

        return start_practice(message)

    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ
    bot.send_message(chat_id, "–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –≤–≤–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")


def get_button_text(button_id):
    session = Session()
    btn_text = session.query(ButtonText).filter_by(button_id=button_id).first()
    session.close()
    return btn_text.text if btn_text else "–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"


def show_profile(call):
    session = Session()
    user = session.query(User).filter_by(telegram_id=call.message.chat.id).first()
    bot.delete_message(call.message.chat.id, call.message.message_id)
    markup = types.InlineKeyboardMarkup()
    back_btn = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')
    markup.add(back_btn)
    if user:
        profile_text = (
            f"üë§ –ü—Ä–æ—Ñ–∏–ª—å:\n"
            f"–ò–º—è: {user.username}\n"
            f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.registration_date.strftime('%Y-%m-%d')}\n"
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {user.correct_answers}\n"
            f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {user.incorrect_answers}"
        )
    else:
        profile_text = "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."

    session.close()
    bot.send_message(call.message.chat.id, profile_text, reply_markup=markup)


def show_leaderboard(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    session = Session()
    top_users = session.query(User).order_by(User.correct_answers.desc()).limit(10).all()
    session.close()

    if not top_users:
        text = "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ —Ä–µ—à–∏–ª –∑–∞–¥–∞–Ω–∏—è üò¢"
    else:
        text = "üèÜ –¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–∞–º:\n\n"
        for i, user in enumerate(top_users, 1):
            text += f"{i}. {user.username or '–ë–µ–∑ –∏–º–µ–Ω–∏'} ‚Äî {user.correct_answers} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤\n"

    markup = types.InlineKeyboardMarkup()
    back_btn = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')
    markup.add(back_btn)

    bot.send_message(call.message.chat.id, text, reply_markup=markup)


def start_practice(obj):
    if isinstance(obj, types.Message):
        chat_id = obj.chat.id
    else:
        chat_id = obj.message.chat.id
        bot.delete_message(chat_id, obj.message.message_id)

    session = Session()
    all_questions = session.query(PracticeQuestion).all()
    session.close()

    user_data = user_practice_data.get(chat_id, {"asked": []})
    remaining = [q for q in all_questions if q.question not in user_data["asked"]]

    if not remaining:
        bot.send_message(chat_id, "üéâ –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
        return start(obj.message if isinstance(obj, types.CallbackQuery) else obj)

    question_obj = random.choice(remaining)
    user_data["asked"].append(question_obj.question)
    user_data["current_question"] = question_obj.question
    user_practice_data[chat_id] = user_data

    markup = types.InlineKeyboardMarkup()
    finish_btn = types.InlineKeyboardButton("üö™ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish_practice")
    markup.add(finish_btn)

    bot.send_message(chat_id, f"üß† –ó–∞–¥–∞–Ω–∏–µ:\n{question_obj.question}", reply_markup=markup)


def get_weather(city):
    api_key = "f430450853714c279f8221723251705"
    url = f"http://api.weatherapi.com/v1/current.json?key={api_key}&q={city}&lang=ru"

    response = requests.get(url)
    if response.status_code != 200:
        return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

    data = response.json()
    location = data["location"]["name"]
    temp_c = data["current"]["temp_c"]
    condition = data["current"]["condition"]["text"]
    feelslike = data["current"]["feelslike_c"]
    wind_kph = data["current"]["wind_kph"]

    return (
        f"üå§ –ü–æ–≥–æ–¥–∞ –≤ {location}:\n"
        f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp_c}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feelslike}¬∞C)\n"
        f"üí® –í–µ—Ç–µ—Ä: {wind_kph} –∫–º/—á\n"
        f"üìù –°–æ—Å—Ç–æ—è–Ω–∏–µ: {condition}"
    )


def Main_Menu(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('–°—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ', callback_data='btn_1')
    btn2 = types.InlineKeyboardButton('–î–µ—Å—è—Ç–∏—á–Ω–∞—è –∑–∞–ø–∏—Å—å —á–∏—Å–ª–∞', callback_data='btn_2')
    btn3 = types.InlineKeyboardButton('–ù–û–î –∏ –ù–û–ö', callback_data='btn_3')
    btn4 = types.InlineKeyboardButton('–û—Å—Ç–∞—Ç–∫–∏', callback_data='btn_4')
    btn5 = types.InlineKeyboardButton('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –º–æ–¥—É–ª—é', callback_data='btn_5')
    btn6 = types.InlineKeyboardButton('–ü—Ä–∏–∑–Ω–∞–∫–∏ –¥–µ–ª–∏–º–æ—Å—Ç–∏', callback_data='btn_6')
    btn7 = types.InlineKeyboardButton('–î–∏–æ—Ñ–∞–Ω—Ç–æ–≤—ã —É—Ä–∞–≤–Ω–µ–Ω–∏—è', callback_data='btn_7')
    btn8 = types.InlineKeyboardButton('–ò–Ω–≤–∞—Ä–∏–∞–Ω—Ç –∏ –ø–æ–ª—É–∏–Ω–≤–∞—Ä–∏–∞–Ω—Ç', callback_data='btn_8')
    btn9 = types.InlineKeyboardButton('–ü—Ä–∏–Ω—Ü–∏–ø –∫—Ä–∞–π–Ω–µ–≥–æ', callback_data='btn_9')
    btn10 = types.InlineKeyboardButton('–¢—É—Ä–Ω–∏—Ä—ã', callback_data='btn_10')
    btn11 = types.InlineKeyboardButton('–¢–µ–æ—Ä–∏—è –∏–≥—Ä', callback_data='btn_11')
    btn12 = types.InlineKeyboardButton('–†–∞—Å–∫—Ä–∞—Å–∫–∏', callback_data='btn_12')
    btn13 = types.InlineKeyboardButton('–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –±–∏–µ–∫—Ü–∏—è', callback_data='btn_13')
    btn14 = types.InlineKeyboardButton('–ü—Ä–∏–Ω—Ü–∏–ø –î–∏—Ä–∏—Ö–ª–µ', callback_data='btn_14')
    btn15 = types.InlineKeyboardButton('–ì—Ä–∞—Ñ—ã', callback_data='btn_15')
    back_btn = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')
    markup.add(btn1)
    markup.add(btn2)
    markup.add(btn3)
    markup.add(btn4)
    markup.add(btn5)
    markup.add(btn6)
    markup.add(btn7)
    markup.add(btn8)
    markup.add(btn9)
    markup.add(btn10)
    markup.add(btn11)
    markup.add(btn12)
    markup.add(btn13)
    markup.add(btn14)
    markup.add(btn15)
    markup.add(back_btn)
    bot.send_message(call.message.chat.id,
                     'üìö –†–∞–∑–¥–µ–ª ¬´–¢–µ–æ—Ä–∏—è¬ª \n–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å –≤–∞–∂–Ω—ã–µ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ï–ì–≠. \n–ú—ã —Å–æ–±—Ä–∞–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞, —Ñ–æ—Ä–º—É–ª—ã –∏ –ø–æ–Ω—è—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —Ç–µ–±–µ —É–≤–µ—Ä–µ–Ω–Ω–æ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å —ç–∫–∑–∞–º–µ–Ω–æ–º.',
                     reply_markup=markup)


user_suggestions = {}
user_practice_data = {}


def Offers(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.send_message(call.message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –∏–¥–µ—é –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –±–æ—Ç–∞.")
    user_suggestions[call.message.chat.id] = "waiting_for_suggestion"


def Files(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    markup = types.InlineKeyboardMarkup()
    back_btn = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')
    markup.add(back_btn)
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ –±–∏–Ω–∞—Ä–Ω–æ–º —Ä–µ–∂–∏–º–µ ('rb') –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    with open('_19_–¢–µ–æ—Ä–∏—è_—á–∏—Å–µ–ª__–®–ø–∞—Ä–≥–∞–ª–∫–∞__518sk.pdf', 'rb') as file:
        bot.send_document(call.message.chat.id, file)
    with open('_19_–í—Å—è_—Ç–µ–æ—Ä–∏—è__4krsn.pdf', 'rb') as file:
        bot.send_document(call.message.chat.id, file)
    bot.send_message(call.message.chat.id,
                     "üìÇ –†–∞–∑–¥–µ–ª ¬´–ü–æ–ª–µ–∑–Ω—ã–µ —Ñ–∞–π–ª—ã¬ª \n–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ï–ì–≠ ‚Äî —à–ø–∞—Ä–≥–∞–ª–∫–∏, –∫–æ–Ω—Å–ø–µ–∫—Ç—ã, —Ç–µ—Å—Ç—ã –∏ –∑–∞–¥–∞–Ω–∏—è –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. \n–°–∫–∞—á–∏–≤–∞–π –∏ –∏—Å–ø–æ–ª—å–∑—É–π –∏—Ö, —á—Ç–æ–±—ã —É—á–∏—Ç—å—Å—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∏ —ç–∫–æ–Ω–æ–º–∏—Ç—å –≤—Ä–µ–º—è!",
                     reply_markup=markup)


def Channels(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    markup = types.InlineKeyboardMarkup()
    btn_1 = types.InlineKeyboardButton('–®–∫–æ–ª–∫–æ–≤–æ', url='https://t.me/MO_EGE')
    btn_2 = types.InlineKeyboardButton('100–±–∞–ª–ª—å–Ω—ã–π —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä', url='https://t.me/stopoints')
    btn_3 = types.InlineKeyboardButton('–ú–∞—Ç–µ–º–∞—Ç–∏–∫ –ê–Ω–¥—Ä–µ–π', url='https://t.me/+FtHYfWjb5K04MWNi')
    btn_4 = types.InlineKeyboardButton('–£–º—Å–∫—É–ª', url='https://t.me/semreshaet')
    back_btn = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')
    markup.add(btn_1)
    markup.add(btn_2)
    markup.add(btn_3)
    markup.add(btn_4)
    markup.add(back_btn)
    bot.send_message(call.message.chat.id,
                     "üì¢ –†–∞–∑–¥–µ–ª ¬´–ü–æ–ª–µ–∑–Ω—ã–µ –∫–∞–Ω–∞–ª—ã¬ª \n–ú—ã —Å–æ–±—Ä–∞–ª–∏ –¥–ª—è —Ç–µ–±—è –ø–æ–¥–±–æ—Ä–∫—É Telegram-–∫–∞–Ω–∞–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –ï–ì–≠. \n–¢–∞–º ‚Äî —Ä–∞–∑–±–æ—Ä—ã –∑–∞–¥–∞–Ω–∏–π, —Å–æ–≤–µ—Ç—ã, –ª–∞–π—Ñ—Ö–∞–∫–∏, —Ç–µ–æ—Ä–∏—è –∏ —Å–≤–µ–∂–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤. –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –∏ –±—É–¥—å –≤ —Ç–µ–º–µ!",
                     reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "btn_1")
def button_1(call):
    text = get_button_text("btn_1")
    bot.delete_message(call.message.chat.id, call.message.message_id)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back"))
    bot.send_message(call.message.chat.id, text, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "btn_2")
def button_2(call):
    text = get_button_text("btn_2")
    bot.delete_message(call.message.chat.id, call.message.message_id)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back"))
    bot.send_message(call.message.chat.id, text, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "btn_3")
def button_3(call):
    text = get_button_text("btn_3")
    bot.delete_message(call.message.chat.id, call.message.message_id)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back"))
    bot.send_message(call.message.chat.id, text, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "btn_4")
def button_4(call):
    text = get_button_text("btn_4")
    bot.delete_message(call.message.chat.id, call.message.message_id)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back"))
    bot.send_message(call.message.chat.id, text, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "btn_5")
def button_5(call):
    text = get_button_text("btn_5")
    bot.delete_message(call.message.chat.id, call.message.message_id)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back"))
    bot.send_message(call.message.chat.id, text, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "btn_6")
def button_6(call):
    text = get_button_text("btn_6")
    bot.delete_message(call.message.chat.id, call.message.message_id)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back"))
    bot.send_message(call.message.chat.id, text, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "btn_7")
def button_7(call):
    text = get_button_text("btn_7")
    bot.delete_message(call.message.chat.id, call.message.message_id)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back"))
    bot.send_message(call.message.chat.id, text, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "btn_8")
def button_8(call):
    text = get_button_text("btn_8")
    bot.delete_message(call.message.chat.id, call.message.message_id)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back"))
    bot.send_message(call.message.chat.id, text, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "btn_9")
def button_9(call):
    text = get_button_text("btn_9")
    bot.delete_message(call.message.chat.id, call.message.message_id)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back"))
    bot.send_message(call.message.chat.id, text, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "btn_10")
def button_10(call):
    text = get_button_text("btn_10")
    bot.delete_message(call.message.chat.id, call.message.message_id)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back"))
    bot.send_message(call.message.chat.id, text, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "btn_11")
def button_11(call):
    text = get_button_text("btn_11")
    bot.delete_message(call.message.chat.id, call.message.message_id)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back"))
    bot.send_message(call.message.chat.id, text, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "btn_12")
def button_12(call):
    text = get_button_text("btn_12")
    bot.delete_message(call.message.chat.id, call.message.message_id)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back"))
    bot.send_message(call.message.chat.id, text, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "btn_13")
def button_13(call):
    text = get_button_text("btn_13")
    bot.delete_message(call.message.chat.id, call.message.message_id)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back"))
    bot.send_message(call.message.chat.id, text, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "btn_14")
def button_14(call):
    text = get_button_text("btn_14")
    bot.delete_message(call.message.chat.id, call.message.message_id)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back"))
    bot.send_message(call.message.chat.id, text, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "btn_15")
def button_15(call):
    text = get_button_text("btn_15")
    bot.delete_message(call.message.chat.id, call.message.message_id)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back"))
    bot.send_message(call.message.chat.id, text, reply_markup=markup)


def back_to_start(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)
    start(call.message)  # –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º start, –∫–∞–∫ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def universal_handler(call):
    if call.data == 'profile':
        show_profile(call)
    elif call.data == 'theory':
        Main_Menu(call)
    elif call.data == 'practice':
        start_practice(call)
    elif call.data == 'files':
        Files(call)
    elif call.data == 'offers':
        Offers(call)
    elif call.data == 'btn_1':
        button_1(call)
    elif call.data == 'btn_2':
        button_2(call)
    elif call.data == 'btn_3':
        button_3(call)
    elif call.data == 'btn_4':
        button_4(call)
    elif call.data == 'btn_5':
        button_5(call)
    elif call.data == 'btn_6':
        button_6(call)
    elif call.data == 'btn_7':
        button_7(call)
    elif call.data == 'btn_8':
        button_8(call)
    elif call.data == 'btn_9':
        button_9(call)
    elif call.data == 'btn_10':
        button_10(call)
    elif call.data == 'btn_11':
        button_11(call)
    elif call.data == 'btn_12':
        button_12(call)
    elif call.data == 'btn_13':
        button_13(call)
    elif call.data == 'btn_14':
        button_14(call)
    elif call.data == 'btn_15':
        button_15(call)
    elif call.data == 'back':
        back_to_start(call)
    elif call.data == "finish_practice":
        back_to_start(call)
    elif call.data == 'leaderboard':
        show_leaderboard(call)
    elif call.data == 'channels':
        Channels(call)
    elif call.data == 'weather':
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É.")
        user_suggestions[call.message.chat.id] = "waiting_for_weather"


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)
